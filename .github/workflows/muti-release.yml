name: Multi-Platform Release
permissions:
  contents: write

on:
  push:
    tags:
      - '*'
      - '!*-alpha*'

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Build Frontend
        env:
          CI: ""
        run: |
          cd web
          npm install
          REACT_APP_VERSION=$(git describe --tags) npm run build
          cd ..
      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend
          path: web/build

  build-backend:
    needs: build-frontend
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            goos: darwin
            arch: amd64
          - os: macos-latest
            goos: darwin
            arch: arm64
          - os: ubuntu-latest
            goos: linux
            arch: amd64
          - os: ubuntu-latest
            goos: linux
            arch: arm64
          - os: windows-latest
            goos: windows
            arch: amd64
          - os: windows-latest
            goos: windows
            arch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend
          path: web/build
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.18.0'
      - name: Build Backend
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
        run: |
          go mod download
          if [ "$GOOS" = "windows" ]; then
            EXT=".exe"
          else
            EXT=""
          fi
          OUTPUT="one-api-${GOOS}-${GOARCH}${EXT}"
          go build -ldflags "-X 'one-api/common.Version=$(git describe --tags)'" -o "$OUTPUT"
          echo "OUTPUT_FILE=$OUTPUT" >> $GITHUB_ENV
      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v3
        with:
          name: one-api-${{ matrix.goos }}-${{ matrix.arch }}
          path: ${{ env.OUTPUT_FILE }}

  release:
    needs: [build-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: artifacts/**/*
          draft: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}